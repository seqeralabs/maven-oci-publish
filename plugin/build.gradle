/*
 * Copyright 2025, Seqera Labs
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details on writing Custom Plugins, please refer to https://docs.gradle.org/8.14.2/userguide/custom_plugins.html in the Gradle documentation.
 */

plugins {
    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
    id 'java-gradle-plugin'

    // Apply the Groovy plugin to add support for Groovy (for tests only)
    id 'groovy'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

java {
    // these settings apply to all jvm tooling, including groovy
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
    sourceCompatibility = 17
    targetCompatibility = 17
}

dependencies {
    // ORAS Java SDK for OCI registry operations
    implementation 'land.oras:oras-java-sdk:0.2.15'
    
    // Use the awesome Spock testing and specification framework
    testImplementation libs.spock.core
    
    // Testcontainers for integration testing
    testImplementation 'org.testcontainers:testcontainers:1.19.3'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

gradlePlugin {
    // Define the plugin
    plugins {
        mavenOciPublish {
            id = 'io.seqera.maven-oci-publish'
            implementationClass = 'io.seqera.mavenoci.MavenOciPublishPlugin'
        }
    }
}

// Configure source sets - Java for main sources, Groovy for tests
sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
        groovy {
            srcDirs = []  // No main Groovy sources
        }
    }
    test {
        groovy {
            srcDirs = ['src/test/groovy']
        }
    }
    functionalTest {
        groovy {
            srcDirs = ['src/functionalTest/groovy']
        }
    }
}

configurations.functionalTestImplementation.extendsFrom(configurations.testImplementation)
configurations.functionalTestRuntimeOnly.extendsFrom(configurations.testRuntimeOnly)

// Add a task to run the functional tests
tasks.register('functionalTest', Test) {
    testClassesDirs = sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    useJUnitPlatform()
}

gradlePlugin.testSourceSets.add(sourceSets.functionalTest)

tasks.named('check') {
    // Run the functional tests as part of `check`
    dependsOn(tasks.functionalTest)
}

tasks.named('test') {
    // Use JUnit Jupiter for unit tests.
    useJUnitPlatform()
}
